name: Patch VirtualHere USB Server

on:
  workflow_dispatch:
    inputs:
      serial_number:
        description: 'Serial Number (e.g., 123456789abcdef)'
        required: true
        type: string
      device_count:
        description: 'Number of devices (1-64)'
        required: false
        default: '63'
        type: string

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  patch-and-upload:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup environment
      run: |
        # 解压工具包
        unzip activator_linux.zip
        chmod +x activator
        chmod +x upx
        
        # 设置库路径
        export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH
        
        # 创建输出目录
        mkdir -p patched_files
        
        # 测试activator是否工作
        echo "Testing activator..."
        ./activator 2>&1 || true
    
    - name: Process IPK files and Generate License
      run: |
        # 设置变量
        SN="${{ github.event.inputs.serial_number }}"
        DEVICES="${{ github.event.inputs.device_count }}"
        
        echo "Processing with Serial Number: $SN"
        echo "Device Count: $DEVICES"
        
        # 导出环境变量
        export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH
        
        # 初始化license变量
        LICENSE_KEY=""
        LICENSE_GENERATED=false
        
        # 处理每个IPK文件
        for ipk_file in ipk/*.ipk; do
          if [ -f "$ipk_file" ]; then
            echo "========================================="
            echo "Processing: $ipk_file"
            
            # 获取文件名（不含路径）
            filename=$(basename "$ipk_file")
            base_name="${filename%.*}"
            
            # 创建临时目录
            temp_dir="temp_$base_name"
            mkdir -p "$temp_dir"
            
            # 解压IPK文件 - 尝试多种格式
            echo "Extracting IPK file..."
            if ! tar -xzf "$ipk_file" -C "$temp_dir" 2>/dev/null; then
              if ! tar -xf "$ipk_file" -C "$temp_dir" 2>/dev/null; then
                if ! ar x "$ipk_file" 2>/dev/null; then
                  unzip -q "$ipk_file" -d "$temp_dir" 2>/dev/null || {
                    echo "Failed to extract $ipk_file"
                    continue
                  }
                else
                  # ar格式，需要进一步解压data.tar.gz
                  if [ -f "data.tar.gz" ]; then
                    tar -xzf data.tar.gz -C "$temp_dir"
                    rm -f control.tar.gz data.tar.gz debian-binary
                  fi
                fi
              fi
            fi
            
            # 查找并处理vhusbd文件
            find "$temp_dir" -type f KATEX_INLINE_OPEN -name "vhusbd*" -o -name "vhusbdarm" -o -name "vhusbdmipsel" KATEX_INLINE_CLOSE ! -name "*.exe" -print0 | while IFS= read -r -d '' vhusbd_file; do
              echo "Found VirtualHere binary: $vhusbd_file"
              
              # 复制到工作目录
              cp "$vhusbd_file" ./vhusbd_work
              chmod +x ./vhusbd_work
              
              # 备份原始文件用于生成license
              if [ "$LICENSE_GENERATED" = false ]; then
                cp "$vhusbd_file" ./vhusbd_original
              fi
              
              # 步骤1: 解压二进制文件
              echo "Unpacking with UPX..."
              ./upx -d ./vhusbd_work 2>/dev/null || echo "File may not be packed with UPX, continuing..."
              
              # 步骤3: 使用activator打补丁
              echo "Patching with activator..."
              PATCH_OUTPUT=$(./activator ./vhusbd_work $DEVICES $SN 2>&1)
              echo "$PATCH_OUTPUT"
              
              # 提取License信息 - 改进的提取逻辑
              if [ "$LICENSE_GENERATED" = false ]; then
                # 方法1: 从输出中提取
                TEMP_LICENSE=$(echo "$PATCH_OUTPUT" | grep "License=" | tail -1 | cut -d'=' -f2-)
                if [ -n "$TEMP_LICENSE" ]; then
                  LICENSE_KEY="$TEMP_LICENSE"
                  LICENSE_GENERATED=true
                  echo "Successfully extracted license: $LICENSE_KEY"
                fi
                
                # 方法2: 如果方法1失败，尝试从patched信息推断
                if [ "$LICENSE_GENERATED" = false ]; then
                  PATCHED_INFO=$(echo "$PATCH_OUTPUT" | grep "patched")
                  if [ -n "$PATCHED_INFO" ]; then
                    # 生成一个基础的license格式
                    LICENSE_KEY="${SN},${DEVICES},PATCHED"
                    echo "Generated basic license format: $LICENSE_KEY"
                  fi
                fi
              fi
              
              # 步骤4: 重新压缩
              echo "Compressing with UPX..."
              ./upx -9 ./vhusbd_work 2>/dev/null || echo "Compression skipped"
              
              # 复制回原位置
              cp ./vhusbd_work "$vhusbd_file"
              rm -f ./vhusbd_work
            done
            
            # 重新打包IPK文件
            echo "Repacking IPK file..."
            cd "$temp_dir"
            tar -czf "../patched_files/${SN}${filename}" . 2>/dev/null || \
            zip -r "../patched_files/${SN}${filename}" . >/dev/null 2>&1
            cd ..
            
            # 清理临时目录
            rm -rf "$temp_dir"
            
            echo "Created: patched_files/${SN}${filename}"
            echo "========================================="
          fi
        done
        
        # 尝试使用原始文件生成完整的license key
        if [ -f "./vhusbd_original" ] && [ "$LICENSE_GENERATED" = false ]; then
          echo "Attempting to generate license with original binary..."
          ./upx -d ./vhusbd_original 2>/dev/null || true
          FINAL_OUTPUT=$(./activator ./vhusbd_original $DEVICES $SN 2>&1)
          echo "$FINAL_OUTPUT"
          EXTRACTED_LICENSE=$(echo "$FINAL_OUTPUT" | grep "License=" | tail -1 | cut -d'=' -f2-)
          if [ -n "$EXTRACTED_LICENSE" ]; then
            LICENSE_KEY="$EXTRACTED_LICENSE"
            LICENSE_GENERATED=true
          fi
          rm -f ./vhusbd_original
        fi
        
        # 如果仍然没有license，创建一个说明文件
        if [ -z "$LICENSE_KEY" ]; then
          echo "Warning: Could not extract license key automatically" > patched_files/${SN}_license_key.txt
          echo "The binary files have been patched with:" >> patched_files/${SN}_license_key.txt
          echo "Serial Number: $SN" >> patched_files/${SN}_license_key.txt
          echo "Device Count: $DEVICES" >> patched_files/${SN}_license_key.txt
          echo "" >> patched_files/${SN}_license_key.txt
          echo "You may need to check the patched binary directly for the license key." >> patched_files/${SN}_license_key.txt
        else
          # 保存license key
          echo "$LICENSE_KEY" > patched_files/${SN}_license_key.txt
          echo "License key saved: $LICENSE_KEY"
        fi
        
        # 创建一个详细信息文件
        cat > patched_files/${SN}_info.txt << EOF
        Patch Information
        =================
        Serial Number: $SN
        Device Count: $DEVICES
        Patch Date: $(date)
        
        License Key:
        $LICENSE_KEY
        
        Instructions:
        1. Install the patched IPK file on your device
        2. In VirtualHere client, go to USB Servers -> License -> Enter Key
        3. Enter the license key from above or from the license_key.txt file
        4. You should see: USB Hub,s/n=$SN,$DEVICES devices
        
        Note: If all devices require authorization after activation, 
        try reducing the device count.
        EOF
        
        # 显示结果
        echo "=== Final Results ==="
        ls -la patched_files/
        echo "=== License Key File Content ==="
        cat patched_files/${SN}_license_key.txt
        echo "=== Info File Content ==="
        cat patched_files/${SN}_info.txt
    
    - name: Check files before upload
      run: |
        echo "Checking generated files..."
        for file in patched_files/*; do
          if [ -f "$file" ]; then
            echo "File: $file, Size: $(stat -c%s "$file") bytes"
            if [ $(stat -c%s "$file") -eq 0 ]; then
              echo "Warning: $file is empty, adding placeholder content"
              echo "File was empty - placeholder added" > "$file"
            fi
          fi
        done
    
    - name: Upload patched files
      uses: actions/upload-artifact@v4
      with:
        name: patched-virtualhere-${{ github.event.inputs.serial_number }}
        path: patched_files/*
        retention-days: 30
    
    - name: Create Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: patch-${{ github.event.inputs.serial_number }}-${{ github.run_number }}
        name: Patched VirtualHere - SN ${{ github.event.inputs.serial_number }}
        body: |
          ## Patched VirtualHere USB Server
          
          **Serial Number:** ${{ github.event.inputs.serial_number }}
          **Device Count:** ${{ github.event.inputs.device_count }}
          **Date:** $(date '+%Y-%m-%d %H:%M:%S')
          
          ### 📦 Files Included
          - Patched IPK files (prefixed with serial number)
          - License key file: `*_license_key.txt`
          - Information file: `*_info.txt`
          
          ### 📝 Installation Instructions
          1. Download the patched IPK file for your device
          2. Install it on your router/device
          3. Open VirtualHere client
          4. Go to USB Servers → License → Enter Key
          5. Enter the license key from the `license_key.txt` file
          
          ### ⚠️ Important Notes
          - If devices require authorization after activation, reduce the device count
          - Make sure to use the correct architecture IPK for your device
          - Keep the license key safe for future use
        files: patched_files/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
