name: Patch VirtualHere USB Server

on:
  workflow_dispatch:
    inputs:
      serial_number:
        description: 'Serial Number (e.g., 123456789abcdef)'
        required: true
        type: string
      device_count:
        description: 'Number of devices (1-64)'
        required: false
        default: '63'
        type: string

# 添加权限设置
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  patch-and-upload:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup environment
      run: |
        # 解压工具包
        unzip activator_linux.zip
        chmod +x activator
        chmod +x upx
        
        # 设置库路径
        export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH
        
        # 创建输出目录
        mkdir -p patched_files
        
        # 测试activator是否工作
        echo "Testing activator..."
        ./activator 2>&1 || true
    
    - name: Process IPK files and Generate License
      run: |
        # 设置变量
        SN="${{ github.event.inputs.serial_number }}"
        DEVICES="${{ github.event.inputs.device_count }}"
        
        echo "Processing with Serial Number: $SN"
        echo "Device Count: $DEVICES"
        
        # 导出环境变量
        export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH
        
        # 创建一个临时vhusbd文件来生成许可证密钥
        LICENSE_KEY=""
        
        # 处理每个IPK文件
        for ipk_file in ipk/*.ipk; do
          if [ -f "$ipk_file" ]; then
            echo "========================================="
            echo "Processing: $ipk_file"
            
            # 获取文件名（不含路径）
            filename=$(basename "$ipk_file")
            base_name="${filename%.*}"
            
            # 创建临时目录
            temp_dir="temp_$base_name"
            mkdir -p "$temp_dir"
            
            # 解压IPK文件 - 尝试多种格式
            echo "Extracting IPK file..."
            if ! tar -xzf "$ipk_file" -C "$temp_dir" 2>/dev/null; then
              if ! tar -xf "$ipk_file" -C "$temp_dir" 2>/dev/null; then
                if ! ar x "$ipk_file" 2>/dev/null; then
                  unzip -q "$ipk_file" -d "$temp_dir" 2>/dev/null || {
                    echo "Failed to extract $ipk_file"
                    continue
                  }
                else
                  # ar格式，需要进一步解压data.tar.gz
                  if [ -f "data.tar.gz" ]; then
                    tar -xzf data.tar.gz -C "$temp_dir"
                    rm -f control.tar.gz data.tar.gz debian-binary
                  fi
                fi
              fi
            fi
            
            # 查找并处理vhusbd文件
            FOUND_BINARY=false
            find "$temp_dir" -type f KATEX_INLINE_OPEN -name "vhusbd*" -o -name "vhusbdarm" -o -name "vhusbdmipsel" KATEX_INLINE_CLOSE ! -name "*.exe" | while read vhusbd_file; do
              echo "Found VirtualHere binary: $vhusbd_file"
              FOUND_BINARY=true
              
              # 复制到工作目录
              cp "$vhusbd_file" ./vhusbd_work
              chmod +x ./vhusbd_work
              
              # 步骤1: 解压二进制文件
              echo "Unpacking with UPX..."
              ./upx -d ./vhusbd_work 2>/dev/null || echo "File may not be packed with UPX, continuing..."
              
              # 步骤3: 使用activator打补丁
              echo "Patching with activator..."
              PATCH_OUTPUT=$(./activator ./vhusbd_work $DEVICES $SN 2>&1)
              echo "$PATCH_OUTPUT"
              
              # 提取License信息
              if [ -z "$LICENSE_KEY" ]; then
                LICENSE_KEY=$(echo "$PATCH_OUTPUT" | grep "License=" | sed 's/License=//')
                if [ -n "$LICENSE_KEY" ]; then
                  echo "Extracted license key: $LICENSE_KEY"
                  echo "$LICENSE_KEY" > patched_files/${SN}_license_key.txt
                fi
              fi
              
              # 步骤4: 重新压缩
              echo "Compressing with UPX..."
              ./upx -9 ./vhusbd_work 2>/dev/null || echo "Compression skipped"
              
              # 复制回原位置
              cp ./vhusbd_work "$vhusbd_file"
              rm -f ./vhusbd_work
            done
            
            # 重新打包IPK文件
            echo "Repacking IPK file..."
            cd "$temp_dir"
            
            # 尝试使用tar打包
            tar -czf "../patched_files/${SN}${filename}" . 2>/dev/null || \
            zip -r "../patched_files/${SN}${filename}" . >/dev/null 2>&1
            
            cd ..
            
            # 清理临时目录
            rm -rf "$temp_dir"
            
            echo "Created: patched_files/${SN}${filename}"
            echo "========================================="
          fi
        done
        
        # 如果还没有生成license key，尝试其他方法
        if [ ! -f "patched_files/${SN}_license_key.txt" ]; then
          echo "Attempting to generate license key..."
          
          # 创建一个dummy文件来获取license
          touch dummy_vhusbd
          chmod +x dummy_vhusbd
          
          # 运行activator获取license
          ./activator dummy_vhusbd $DEVICES $SN 2>&1 | tee activator_output.txt || true
          
          # 提取License
          grep "License=" activator_output.txt | sed 's/License=//' > patched_files/${SN}_license_key.txt || true
          
          rm -f dummy_vhusbd activator_output.txt
        fi
        
        # 显示结果
        echo "=== Final Results ==="
        ls -la patched_files/
        if [ -f "patched_files/${SN}_license_key.txt" ]; then
          echo "License Key Content:"
          cat "patched_files/${SN}_license_key.txt"
        else
          echo "Warning: License key file was not generated"
        fi
    
    - name: Upload patched files
      uses: actions/upload-artifact@v4
      with:
        name: patched-virtualhere-${{ github.event.inputs.serial_number }}
        path: patched_files/*
        retention-days: 30
    
    - name: Create Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: patch-${{ github.event.inputs.serial_number }}-${{ github.run_number }}
        name: Patched VirtualHere - SN ${{ github.event.inputs.serial_number }}
        body: |
          ## Patched VirtualHere USB Server
          
          **Serial Number:** ${{ github.event.inputs.serial_number }}
          **Device Count:** ${{ github.event.inputs.device_count }}
          
          ### 使用说明
          1. 下载对应的IPK文件
          2. 在客户端USB服务器 - 许可证 - 输入密钥
          3. 查看 license_key.txt 文件获取许可证密钥
          
          ### 文件列表
          - 破解后的IPK文件：以序列号开头
          - 许可证密钥文件：${序列号}_license_key.txt
        files: patched_files/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
