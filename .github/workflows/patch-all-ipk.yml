name: Patch VirtualHere USB Server

on:
  workflow_dispatch:
    inputs:
      serial_number:
        description: 'Serial Number (e.g., 123456789abcdef)'
        required: true
        type: string
      device_count:
        description: 'Number of devices (1-64)'
        required: false
        default: '63'
        type: string

jobs:
  patch-and-upload:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup environment
      run: |
        # 解压工具包
        unzip activator_linux.zip
        chmod +x activator
        chmod +x upx
        
        # 设置库路径
        export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH
        
        # 创建输出目录
        mkdir -p patched_files
    
    - name: Process IPK files
      run: |
        # 设置变量
        SN="${{ github.event.inputs.serial_number }}"
        DEVICES="${{ github.event.inputs.device_count }}"
        
        echo "Processing with Serial Number: $SN"
        echo "Device Count: $DEVICES"
        
        # 处理每个IPK文件
        for ipk_file in ipk/*.ipk; do
          if [ -f "$ipk_file" ]; then
            echo "Processing: $ipk_file"
            
            # 获取文件名（不含路径）
            filename=$(basename "$ipk_file")
            base_name="${filename%.*}"
            
            # 创建临时目录
            temp_dir="temp_$base_name"
            mkdir -p "$temp_dir"
            
            # 解压IPK文件
            tar -xzf "$ipk_file" -C "$temp_dir" 2>/dev/null || \
            ar -x "$ipk_file" -C "$temp_dir" 2>/dev/null || \
            unzip -q "$ipk_file" -d "$temp_dir" 2>/dev/null || true
            
            # 查找并处理vhusbd文件
            find "$temp_dir" -type f -name "vhusbd*" ! -name "*.exe" | while read vhusbd_file; do
              echo "Found VirtualHere binary: $vhusbd_file"
              
              # 复制到工作目录
              cp "$vhusbd_file" ./vhusbd_work
              chmod +x ./vhusbd_work
              
              # 步骤1: 解压二进制文件
              ./upx -d ./vhusbd_work 2>/dev/null || echo "File may not be packed with UPX"
              
              # 步骤3: 使用activator打补丁
              echo "Patching with activator..."
              ./activator ./vhusbd_work $DEVICES $SN
              
              # 步骤4: 重新压缩
              ./upx -9 ./vhusbd_work 2>/dev/null || echo "Compression skipped"
              
              # 复制回原位置
              cp ./vhusbd_work "$vhusbd_file"
              rm ./vhusbd_work
            done
            
            # 重新打包IPK文件
            cd "$temp_dir"
            tar -czf "../patched_files/${SN}${filename}" * 2>/dev/null || \
            zip -r "../patched_files/${SN}${filename}" * 2>/dev/null
            cd ..
            
            # 清理临时目录
            rm -rf "$temp_dir"
            
            echo "Created: patched_files/${SN}${filename}"
          fi
        done
        
        # 生成许可证密钥文件
        echo "Generating license key file..."
        ./activator dummy $DEVICES $SN 2>&1 | grep "License=" | cut -d'=' -f2- > patched_files/${SN}_license_key.txt
        
        if [ -s patched_files/${SN}_license_key.txt ]; then
          echo "License key saved to: ${SN}_license_key.txt"
          echo "License: $(cat patched_files/${SN}_license_key.txt)"
        fi
    
    - name: Upload patched files
      uses: actions/upload-artifact@v3
      with:
        name: patched-virtualhere-${{ github.event.inputs.serial_number }}
        path: patched_files/*
    
    - name: Create Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: patch-${{ github.event.inputs.serial_number }}-${{ github.run_number }}
        release_name: Patched VirtualHere - SN ${{ github.event.inputs.serial_number }}
        body: |
          ## Patched VirtualHere USB Server
          
          **Serial Number:** ${{ github.event.inputs.serial_number }}
          **Device Count:** ${{ github.event.inputs.device_count }}
          
          ### 使用说明
          1. 下载对应的IPK文件
          2. 在客户端USB服务器 - 许可证 - 输入密钥
          3. 查看 license_key.txt 文件获取许可证密钥
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      if: success()
      run: |
        # 这里可以添加上传到Release的逻辑
        echo "Files ready for release"
        ls -la patched_files/
