name: üõ†Ô∏è Build Patched VirtualHere IPKs (All Architectures)

on:
  workflow_dispatch:
    inputs:
      serial_number:
        description: 'Serial Number (SN) from your VirtualHere client'
        required: true
        type: string
        placeholder: 'Paste the s/n= value from your client here'
      device_count:
        description: 'Number of devices to activate (1-64)'
        required: true
        type: number
        default: 63
        min: 1
        max: 64

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: üõéÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üì¶ Unpack Tools
        run: |
          unzip activator_linux.zip -d tools/
          chmod +x tools/upx tools/activator
          chmod +r tools/libcrypto.so.1.1

      - name: üìã List Available IPK Files
        run: |
          echo "Found the following IPK files to patch:"
          ls -la ipk/*.ipk || echo "No IPK files found in ipk/ directory"

      - name: üî® Process All IPK Files
        run: |
          export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/tools:$LD_LIBRARY_PATH
          echo "LD_LIBRARY_PATH set to: $LD_LIBRARY_PATH"
          
          for ORIGINAL_IPK in ipk/*.ipk; do
            BASE_IPK_NAME=$(basename "$ORIGINAL_IPK")
            NEW_IPK="${{ inputs.serial_number }}${BASE_IPK_NAME}"
            
            echo "----------------------------------------------------------"
            echo "üîß Processing: $BASE_IPK_NAME -> $NEW_IPK"
            echo "----------------------------------------------------------"

            WORK_DIR=$(mktemp -d)
            cd "$WORK_DIR"
            
            cp "$GITHUB_WORKSPACE/$ORIGINAL_IPK" ./

            mkdir extracted_ipk
            tar -xzf "$BASE_IPK_NAME" -C extracted_ipk/

            cd extracted_ipk
            tar -xzf data.tar.gz

            VHUSBD_FILES=$(find . -name "vhusbd" -type f)
            
            if [ -z "$VHUSBD_FILES" ]; then
              echo "‚ùå Error: Could not find any vhusbd files in $BASE_IPK_NAME"
              cd "$GITHUB_WORKSPACE"
              rm -rf "$WORK_DIR"
              continue
            fi
            
            echo "Found vhusbd files:"
            echo "$VHUSBD_FILES"
            
            PATCH_SUCCESS=false
            
            for VHUSBD_PATH in $VHUSBD_FILES; do
              if [[ "$VHUSBD_PATH" == *"/etc/"* ]] || [[ "$VHUSBD_PATH" == *"/init.d/"* ]]; then
                echo "‚è≠Ô∏è  Skipping script file: $VHUSBD_PATH"
                continue
              fi
              
              echo "‚úÖ Processing vhusbd at: $VHUSBD_PATH"
              echo "File info:"
              file "$VHUSBD_PATH"
              ls -la "$VHUSBD_PATH"
              
              chmod +x "$VHUSBD_PATH"
              echo "Added execute permission to file"

              cd "$GITHUB_WORKSPACE"
              
              # UPX Ëß£Âéã
              ./tools/upx -d "$WORK_DIR/$VHUSBD_PATH" || echo "UPX decompression failed or not needed, continuing..."

              # Á†¥Ëß£‰∫åËøõÂà∂Êñá‰ª∂
              echo "Patching binary with SN: ${{ inputs.serial_number }} and device count: ${{ inputs.device_count }}"
              ./tools/activator "$WORK_DIR/$VHUSBD_PATH" ${{ inputs.device_count }} ${{ inputs.serial_number }}
              
              if [ $? -eq 0 ]; then
                echo "‚úÖ Binary patched successfully"
                PATCH_SUCCESS=true
                
                # UPX ÈáçÊñ∞ÂéãÁº©
                ./tools/upx -9 "$WORK_DIR/$VHUSBD_PATH" || echo "UPX re-compression failed or skipped, continuing..."

                # ÈáçÊñ∞ÊâìÂåÖ
                cd "$WORK_DIR/extracted_ipk"
                tar -czf ../new_data.tar.gz ./*

                cd ..
                cp new_data.tar.gz extracted_ipk/data.tar.gz

                cd extracted_ipk
                tar -czf "$GITHUB_WORKSPACE/$NEW_IPK" ./*

                echo "‚úÖ Successfully created patched IPK: $NEW_IPK"
                break
              else
                echo "‚ùå Binary patching failed with error code: $?"
                cd "$WORK_DIR/extracted_ipk"
              fi
            done

            if [ "$PATCH_SUCCESS" = false ]; then
              echo "‚ùå Failed to patch any vhusbd binary in $BASE_IPK_NAME"
            fi

            cd "$GITHUB_WORKSPACE"
            rm -rf "$WORK_DIR"
            
            echo ""

          done

      - name: üì§ Upload All Patched IPKs
        uses: actions/upload-artifact@v4
        with:
          name: patched-ipks-${{ inputs.serial_number }}
          path: ${{ inputs.serial_number }}*.ipk

      - name: ‚úÖ Completion Message
        run: |
          echo "=========================================================="
          echo "‚úÖ Build completed successfully!"
          echo "üì¶ Generated patched IPK files"
          echo ""
          echo "üîë License Key for your client:"
          echo "   ${{ inputs.serial_number }},${{ inputs.device_count }},MCACDngJMWWSrZJMfzCADSfwAg4aRfJN8P0ukEaj96XRLw=="
          echo ""
          echo "üìñ Next steps:"
          echo "   1. Download the patched IPK from Artifacts"
          echo "   2. Install on your OpenWrt device"
          echo "   3. Enter the license key in VirtualHere client"
          echo "=========================================================="
