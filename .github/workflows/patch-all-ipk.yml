name: 🛠️ Build Patched VirtualHere IPKs (All Architectures)

on:
  workflow_dispatch:
    inputs:
      serial_number:
        description: 'Serial Number (SN) from your VirtualHere client'
        required: true
        type: string
        placeholder: 'Paste the s/n= value from your client here'
      device_count:
        description: 'Number of devices to activate (1-64)'
        required: true
        type: number
        default: 63
        min: 1
        max: 64

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Unpack Tools
        run: |
          unzip activator_linux.zip -d tools/
          chmod +x tools/upx tools/activator

      - name: 📋 List Available IPK Files
        run: |
          echo "Found the following IPK files to patch:"
          ls -la ipk/*.ipk || echo "No IPK files found in ipk/ directory"

      - name: 🔨 Process All IPK Files
        run: |
          # 遍历 ipk/ 目录下的所有 .ipk 文件
          for ORIGINAL_IPK in ipk/*.ipk; do
            BASE_IPK_NAME=$(basename "$ORIGINAL_IPK")
            NEW_IPK="${{ inputs.serial_number }}${BASE_IPK_NAME}"
      
            echo "----------------------------------------------------------"
            echo "🔧 Processing: $BASE_IPK_NAME -> $NEW_IPK"
            echo "----------------------------------------------------------"

            WORK_DIR=$(mktemp -d)
            cd "$WORK_DIR"
      
            # 复制原始 IPK 到临时目录
            cp "$GITHUB_WORKSPACE/$ORIGINAL_IPK" ./

            # 解压原始 IPK
            mkdir extracted_ipk
            tar -xzf "$BASE_IPK_NAME" -C extracted_ipk/

            # 解压 data.tar.gz
            cd extracted_ipk
            tar -xzf data.tar.gz

            # 在整个解压后的文件系统中递归搜索 vhusbd 可执行文件
            echo "Searching for vhusbd binary in the extracted file system..."
            VHUSBD_PATH=$(find . -name "vhusbd*" -type f -executable | head -n 1)
      
            if [ -z "$VHUSBD_PATH" ]; then
              echo "❌ Error: Could not find vhusbd binary in $BASE_IPK_NAME"
              echo "Searched in all directories of the extracted IPK"
              continue
            fi
      
            echo "✅ Found vhusbd at: $VHUSBD_PATH"

            # 回到仓库根目录使用工具
            cd "$GITHUB_WORKSPACE"
      
            # 尝试用 UPX 解压二进制文件
            ./tools/upx -d "$WORK_DIR/$VHUSBD_PATH" || echo "Binary not packed with UPX, continuing..."

            # 使用 activator 破解二进制文件
            echo "Patching binary with SN: ${{ inputs.serial_number }}"
            ./tools/activator "$WORK_DIR/$VHUSBD_PATH" ${{ inputs.device_count }} ${{ inputs.serial_number }}
      
            # 检查破解是否成功
            if [ $? -eq 0 ]; then
              echo "✅ Binary patched successfully"
            else
              echo "❌ Binary patching failed"
              continue
            fi

            # (可选) 重新用 UPX 压缩
            ./tools/upx -9 "$WORK_DIR/$VHUSBD_PATH" || echo "UPX re-compression failed or skipped, continuing..."

            # 重新打包 data.tar.gz
            cd "$WORK_DIR/extracted_ipk"
            tar -czf ../new_data.tar.gz ./*

            # 替换旧的 data.tar.gz
            cd ..
            cp new_data.tar.gz extracted_ipk/data.tar.gz

            # 重新打包整个 IPK
            cd extracted_ipk
            tar -czf "$GITHUB_WORKSPACE/$NEW_IPK" ./*

            # 清理临时工作目录
            cd "$GITHUB_WORKSPACE"
            rm -rf "$WORK_DIR"
      
            echo "✅ Successfully created patched IPK: $NEW_IPK"
            echo ""

          done

      - name: 📤 Upload All Patched IPKs
        uses: actions/upload-artifact@v4
        with:
          name: patched-ipks-${{ inputs.serial_number }}
          path: ${{ inputs.serial_number }}*.ipk

      - name: ✅ Completion Message
        run: |
          echo "=========================================================="
          echo "✅ Build successful! All IPK files have been processed."
          echo "📦 Generated files:"
          ls -la ${{ inputs.serial_number }}*.ipk || echo "No files found"
          echo ""
          echo "🔑 Please use the following license key in your client:"
          echo "   ${{ inputs.serial_number }},${{ inputs.device_count }},XXXXXXXXXXXX"
          echo "=========================================================="
