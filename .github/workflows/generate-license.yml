name: VirtualHere Patcher

on:
  workflow_dispatch:
    inputs:
      serial_number:
        description: '输入序列号 (SN)'
        required: true
        default: 'aaabbbcccddd'
      device_count:
        description: '客户端数量'
        required: true
        default: '63'
      android_noroot:
        description: '安卓免root密钥获取'
        type: boolean
        required: false
        default: false

jobs:
  patch:
    runs-on: ubuntu-20.04  # 使用Ubuntu 20.04以获得更好的兼容性
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup environment
      run: |
        # 安装必要工具
        sudo apt-get update
        sudo apt-get install -y upx-ucl unzip
        
        # 解压activator
        echo "解压 activator2_linux.zip..."
        unzip -o activator2_linux.zip
        
        # 查看解压后的文件
        echo "解压后的文件："
        ls -la
        
        # 给activator添加执行权限
        if [ -f "activator" ]; then
          chmod +x activator
          echo "✓ activator 文件已设置执行权限"
        elif [ -f "activator2" ]; then
          chmod +x activator2
          mv activator2 activator
          echo "✓ activator2 文件已重命名并设置执行权限"
        else
          echo "查找所有可能的activator文件："
          find . -name "*activator*" -type f
        fi
        
        # 测试activator
        echo "测试 activator："
        ./activator 2>&1 || true
        
        # 创建输出目录
        mkdir -p patched_files
        mkdir -p licenses
        
    - name: Process VirtualHere files
      run: |
        # 处理ipk文件夹中的所有vhusbd文件
        for file in ipk/vhusbd*; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "===== 处理文件: $filename ====="
            
            # 复制文件到工作目录
            cp "$file" "./$filename"
            
            # 尝试解压
            echo "尝试解压 $filename..."
            if upx -d "$filename" 2>/dev/null; then
              echo "✓ 解压成功"
              NEED_COMPRESS=true
            else
              echo "✗ 文件未压缩或解压失败，直接修补"
              NEED_COMPRESS=false
            fi
            
            # 修补文件 - 使用正确的参数格式
            echo "修补 $filename..."
            
            # 如果是第一种activator（只需要序列号）
            OUTPUT=$(./activator "$filename" "${{ github.event.inputs.serial_number }}" 2>&1) || true
            echo "$OUTPUT"
            
            # 如果上面失败，尝试第二种格式（带设备数量）
            if ! echo "$OUTPUT" | grep -q "License="; then
              echo "尝试带设备数量的格式..."
              OUTPUT=$(./activator "$filename" "${{ github.event.inputs.device_count }}" "${{ github.event.inputs.serial_number }}" 2>&1) || true
              echo "$OUTPUT"
            fi
            
            # 提取License信息
            LICENSE=$(echo "$OUTPUT" | grep "License=" | cut -d'=' -f2-)
            if [ ! -z "$LICENSE" ]; then
              echo "$filename: $LICENSE" >> licenses/licenses.txt
              echo "License for $filename: $LICENSE"
            fi
            
            # 如果之前解压成功，则压缩
            if [ "$NEED_COMPRESS" = true ]; then
              echo "压缩 $filename..."
              upx -9 "$filename" 2>/dev/null || echo "压缩失败，保留未压缩版本"
            fi
            
            # 移动到输出目录
            mv "$filename" "patched_files/$filename"
            echo "✓ $filename 处理完成"
            echo ""
          fi
        done
        
    - name: Generate Android No-Root License
      if: ${{ github.event.inputs.android_noroot == 'true' }}
      run: |
        echo "===== 生成安卓免root密钥 ====="
        
        # 使用用户输入的序列号
        SN="${{ github.event.inputs.serial_number }}"
        DEVICES="${{ github.event.inputs.device_count }}"
        
        echo "序列号: $SN"
        echo "设备数量: $DEVICES"
        
        # 方法1: 使用标准格式 (activator filename serial)
        echo "尝试方法1: ./activator xx $SN"
        OUTPUT=$(./activator xx "$SN" 2>&1) || true
        echo "$OUTPUT"
        
        # 检查是否成功
        if ! echo "$OUTPUT" | grep -q "License="; then
          # 方法2: 尝试带任意文件名
          echo "尝试方法2: ./activator xxx $SN"
          OUTPUT=$(./activator xxx "$SN" 2>&1) || true
          echo "$OUTPUT"
        fi
        
        # 如果还是失败，尝试创建一个假文件
        if ! echo "$OUTPUT" | grep -q "License="; then
          echo "尝试方法3: 创建假文件"
          touch xx
          OUTPUT=$(./activator xx "$SN" 2>&1) || true
          echo "$OUTPUT"
          rm -f xx
        fi
        
        # 提取License信息
        LICENSE=$(echo "$OUTPUT" | grep "License=" | cut -d'=' -f2-)
        if [ ! -z "$LICENSE" ]; then
          # 格式化输出，添加设备数量
          FORMATTED_LICENSE="${SN},${DEVICES},$(echo $LICENSE | cut -d',' -f3)"
          echo "Android No-Root License: $FORMATTED_LICENSE" | tee -a licenses/android_noroot_license.txt
          echo "" >> licenses/android_noroot_license.txt
          echo "使用方法：" >> licenses/android_noroot_license.txt
          echo "1. 安装Android VirtualHere USB Server APK (无需root)" >> licenses/android_noroot_license.txt
          echo "2. 在Windows客户端查看服务器序列号" >> licenses/android_noroot_license.txt
          echo "3. 在Windows客户端 USB服务器 - 许可证 - 输入密钥中输入: $FORMATTED_LICENSE" >> licenses/android_noroot_license.txt
          echo "" >> licenses/android_noroot_license.txt
          echo "注意: 如果序列号与 $SN 不同，请使用实际的序列号重新生成密钥" >> licenses/android_noroot_license.txt
        else
          echo "⚠️ 未能提取License信息"
          echo "可能需要手动操作："
          echo "1. 先启动服务器获取真实序列号"
          echo "2. 使用真实序列号重新运行工作流"
        fi
        
    - name: Alternative License Generation
      if: ${{ github.event.inputs.android_noroot == 'true' }}
      run: |
        # 如果前面的方法都失败了，尝试使用activator2的不同调用方式
        echo "===== 尝试替代方法生成密钥 ====="
        
        # 检查是否有activator2_win（可能需要wine）
        if [ -f "activator2" ]; then
          chmod +x activator2
          echo "尝试使用activator2..."
          
          SN="${{ github.event.inputs.serial_number }}"
          DEVICES="${{ github.event.inputs.device_count }}"
          
          # 尝试不同的参数组合
          for cmd in \
            "./activator2 xx $SN" \
            "./activator2 xxx $SN" \
            "./activator2 $SN $DEVICES" \
            "./activator2 vhusbd $SN"
          do
            echo "执行: $cmd"
            OUTPUT=$($cmd 2>&1) || true
            echo "$OUTPUT"
            if echo "$OUTPUT" | grep -q "License="; then
              LICENSE=$(echo "$OUTPUT" | grep "License=" | cut -d'=' -f2-)
              echo "成功获取License: $LICENSE" >> licenses/alternative_license.txt
              break
            fi
          done
        fi
        
    - name: Create summary
      run: |
        echo "# VirtualHere 修补完成报告" > patched_files/README.md
        echo "" >> patched_files/README.md
        echo "## 修补参数" >> patched_files/README.md
        echo "- 序列号: ${{ github.event.inputs.serial_number }}" >> patched_files/README.md
        echo "- 客户端数量: ${{ github.event.inputs.device_count }}" >> patched_files/README.md
        echo "- 安卓免root: ${{ github.event.inputs.android_noroot }}" >> patched_files/README.md
        echo "" >> patched_files/README.md
        
        echo "## 修补的文件" >> patched_files/README.md
        if ls patched_files/vhusbd* 1> /dev/null 2>&1; then
          for file in patched_files/vhusbd*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              filesize=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "unknown")
              echo "- $filename ($filesize bytes)" >> patched_files/README.md
            fi
          done
        else
          echo "- 无文件" >> patched_files/README.md
        fi
        echo "" >> patched_files/README.md
        
        if [ -f licenses/licenses.txt ]; then
          echo "## 生成的许可证" >> patched_files/README.md
          echo '```' >> patched_files/README.md
          cat licenses/licenses.txt >> patched_files/README.md
          echo '```' >> patched_files/README.md
        fi
        
        if [ -f licenses/android_noroot_license.txt ]; then
          echo "" >> patched_files/README.md
          echo "## Android免Root许可证" >> patched_files/README.md
          echo '```' >> patched_files/README.md
          cat licenses/android_noroot_license.txt >> patched_files/README.md
          echo '```' >> patched_files/README.md
        fi
        
        if [ -f licenses/alternative_license.txt ]; then
          echo "" >> patched_files/README.md
          echo "## 替代方法生成的许可证" >> patched_files/README.md
          echo '```' >> patched_files/README.md
          cat licenses/alternative_license.txt >> patched_files/README.md
          echo '```' >> patched_files/README.md
        fi
        
        # 复制许可证文件到patched_files
        cp -r licenses/* patched_files/ 2>/dev/null || true
        
    - name: Upload patched files
      uses: actions/upload-artifact@v4
      with:
        name: virtualhere-patched-${{ github.event.inputs.serial_number }}
        path: patched_files/
        retention-days: 30
        
    - name: Display results
      run: |
        echo "===== 修补完成 ====="
        echo "修补的文件已上传到 Artifacts"
        echo ""
        if [ -f licenses/licenses.txt ]; then
          echo "生成的许可证："
          cat licenses/licenses.txt
        fi
        if [ -f licenses/android_noroot_license.txt ]; then
          echo ""
          echo "Android免Root许可证："
          cat licenses/android_noroot_license.txt
        fi
        if [ -f licenses/alternative_license.txt ]; then
          echo ""
          echo "替代方法许可证："
          cat licenses/alternative_license.txt
        fi
