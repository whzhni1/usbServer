name: Patch VirtualHere USB Server

on:
  workflow_dispatch:
    inputs:
      serial_number:
        description: '序列号 Serial Number'
        required: true
        type: string
      device_count:
        description: '设备数量 (1-63)'
        required: false
        default: '63'
        type: string
      android_noroot:
        description: '安卓免root密钥获取'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  patch:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Tools
      run: |
        # 解压工具
        unzip activator2_linux.zip
        chmod +x activator upx
        export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH
        
        # 创建输出目录
        mkdir -p output
    
    - name: Android No-Root License Generation
      if: ${{ github.event.inputs.android_noroot == 'true' }}
      run: |
        SN="${{ github.event.inputs.serial_number }}"
        DEVICES="${{ github.event.inputs.device_count }}"
        
        echo "========================================="
        echo "生成安卓免root密钥"
        echo "序列号: $SN"
        echo "设备数: $DEVICES"
        echo "========================================="
        
        # 执行activator生成密钥
        OUTPUT=$(./activator xx $DEVICES $SN 2>&1)
        echo "$OUTPUT"
        
        # 提取License
        LICENSE=$(echo "$OUTPUT" | grep "License=" | sed 's/License=//')
        
        if [ -n "$LICENSE" ]; then
          echo ""
          echo "生成的密钥: $LICENSE"
          echo "$LICENSE" > output/android_noroot_license_${SN}.txt
          
          # 创建说明文件
          cat > output/README_Android_NoRoot.txt << EOF
        安卓免Root版本密钥
        ==================
        序列号: $SN
        设备数: $DEVICES
        密钥: $LICENSE
        
        使用方法:
        1. 安装 VirtualHere USB Server APK (免root版本)
        2. 在Windows客户端查看序列号
        3. 在客户端: USB服务器 -> 许可证 -> 输入密钥
        4. 输入密钥: $LICENSE
        EOF
        fi
    
    - name: Patch VirtualHere Binaries
      if: ${{ github.event.inputs.android_noroot != 'true' }}
      run: |
        SN="${{ github.event.inputs.serial_number }}"
        DEVICES="${{ github.event.inputs.device_count }}"
        
        echo "========================================="
        echo "修补VirtualHere二进制文件"
        echo "序列号: $SN"
        echo "设备数: $DEVICES"
        echo "========================================="
        
        export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH
        
        # 处理ipk目录中的所有vhusbd文件
        for vhusbd_file in ipk/vhusbd*; do
          if [ -f "$vhusbd_file" ]; then
            filename=$(basename "$vhusbd_file")
            echo ""
            echo "处理: $filename"
            echo "----------------------------------------"
            
            # 复制到工作目录
            cp "$vhusbd_file" "./$filename"
            
            # 步骤1: 尝试解压
            echo "步骤1: upx -d $filename"
            UPX_UNPACKED=false
            if ./upx -d "./$filename" 2>&1; then
              echo "解压成功"
              UPX_UNPACKED=true
            else
              echo "文件未压缩或解压失败，直接修补"
            fi
            
            # 步骤2: 修补（使用任意序列号aaabbbcccddd）
            echo "步骤2: activator $filename aaabbbcccddd"
            PATCH_OUTPUT=$(./activator "./$filename" aaabbbcccddd 2>&1)
            echo "$PATCH_OUTPUT"
            
            # 步骤3: 如果之前解压成功，则重新压缩
            if [ "$UPX_UNPACKED" = true ]; then
              echo "步骤3: upx -9 $filename"
              ./upx -9 "./$filename" 2>&1 || echo "压缩失败"
            else
              echo "步骤3: 跳过压缩（文件原本未压缩）"
            fi
            
            # 保存修补后的文件
            mv "./$filename" "output/${SN}_${filename}"
            echo "已保存: ${SN}_${filename}"
          fi
        done
        
        # 步骤6: 生成真实序列号的许可证
        echo ""
        echo "========================================="
        echo "生成许可证密钥"
        echo "========================================="
        echo "activator xxx $SN"
        LICENSE_OUTPUT=$(./activator xxx $SN 2>&1)
        echo "$LICENSE_OUTPUT"
        
        # 提取License
        LICENSE=$(echo "$LICENSE_OUTPUT" | grep "License=" | sed 's/License=//')
        
        if [ -n "$LICENSE" ]; then
          echo ""
          echo "许可证密钥: $LICENSE"
          echo "$LICENSE" > output/license_${SN}.txt
          
          # 创建说明文件
          cat > output/README.txt << EOF
        VirtualHere USB Server 修补说明
        ================================
        
        修补信息:
        ---------
        序列号: $SN
        设备数: $DEVICES (修补时使用，实际为unlimited)
        许可证密钥: $LICENSE
        
        使用步骤:
        ---------
        1. 将修补后的vhusbd文件部署到目标设备
        2. 运行修补后的服务器
        3. 在客户端查看实际序列号
        4. 在客户端: USB服务器 -> 许可证 -> 输入密钥
        5. 输入密钥: $LICENSE
        6. 应显示: USB Hub,s/n=$SN,unlimited devices
        
        注意事项:
        ---------
        - 如果设备需要授权，尝试减少设备数量
        - Android设备可能需要重启才能识别USB设备
        EOF
        fi
    
    - name: List Output Files
      run: |
        echo "========================================="
        echo "输出文件列表:"
        echo "========================================="
        ls -la output/
        
        echo ""
        echo "密钥文件内容:"
        for license_file in output/*license*.txt; do
          if [ -f "$license_file" ]; then
            echo "--- $(basename $license_file) ---"
            cat "$license_file"
            echo ""
          fi
        done
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: virtualhere-patched-${{ github.event.inputs.serial_number }}
        path: output/*
        retention-days: 30
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: patch-${{ github.event.inputs.serial_number }}-${{ github.run_number }}
        name: VirtualHere Patched - ${{ github.event.inputs.serial_number }}
        body: |
          ## VirtualHere USB Server 修补版本
          
          **序列号:** `${{ github.event.inputs.serial_number }}`
          **设备数:** `${{ github.event.inputs.device_count }}`
          **类型:** ${{ github.event.inputs.android_noroot == 'true' && '安卓免Root密钥' || '标准修补' }}
          
          ### 文件说明
          - 修补后的二进制文件: `${{ github.event.inputs.serial_number }}_vhusbd*`
          - 许可证密钥: `license_*.txt` 或 `android_noroot_license_*.txt`
          - 使用说明: `README*.txt`
          
          ### 快速使用
          1. 下载对应架构的文件
          2. 查看对应的license文件获取密钥
          3. 在客户端输入密钥激活
        files: output/*
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
